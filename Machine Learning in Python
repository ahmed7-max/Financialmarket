import numpy as np
x = np.array([[1,2,3], [4,5,6]])
print("x:\n{}".format(x))
from scipy import sparse
eye = np.eye(4)
print("NumPy array:\n", eye)
sparse_matrix = sparse.csr_matrix(eye)
print("\nSciPy sparse CSR matrix:\n", sparse_matrix)

%matplotlib inline
import matplotlib.pyplot as plt
x = np.linspace(-30,30,300)
y= np.sin(x)
plt.plot(x,y, marker= "x")

import pandas as pd

data = {'Name': ["Ahmed", "Lucas", "Olivier", "Pierre"], 'Location': ["Stockholm", "Göteborg", " Malmö", "Lund"], 
        'Age': ["24", "45", "74", "44"],
        }
data_pandas = pd.DataFrame(data)
display(data_pandas)

!pip install mglearn

##Meet the Data
from sklearn.datasets import load_iris
iris_dataset = load_iris()
print("Keys of iris_dataset:\n", iris_dataset.keys())
print(iris_dataset['DESCR'][:193] + "\n...")
print("Target names:", iris_dataset['target_names'])
print("Feature names:\n", iris_dataset['feature_names'])
print("Type of data:\n", type(iris_dataset['data']))
print("Shape of data:", iris_dataset['data'].shape)
print("First five rows of data:\n", iris_dataset['data'][:5])
print("Type of target:", type(iris_dataset['target']))
print("Shape of target:", iris_dataset['target'].shape)
print("Target:\n", iris_dataset['target'])
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(iris_dataset['data'], iris_dataset['target'], random_state=0)
print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
print("y_train shape:", y_train.shape)
print("y_test shape:", y_test.shape)
## Create dateframe from data in X_Train
## label the columns using the strings in iris_dataset.feature_names

import mglearn

iris_dataframe = pd.DataFrame(X_train, columns=iris_dataset.feature_names)
pd.plotting.scatter_matrix(iris_dataframe, c=y_train, figsize=(15, 15), marker='o', hist_kwds={'bins' : 20}, s=60, alpha=.8, cmap=mglearn.cm3)


#Buildning My first model: k-nearest Neighbors

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(X_train, y_train)

##Making Predictions

X_new = np.array([[5,2.9, 1,0.2]])
print("X_new.shape:", X_new.shape)
prediction = knn.predict(X_new)
print("Prediction:", prediction)
print("Predicted target name:", iris_dataset['target_names'][prediction])
## Evaluating the Model

y_pred = knn.predict(X_test)
print("Test set predictions:\n",y_pred)
print("Test set score:{:.2f}".format(np.mean(y_pred ==y_test)))
print("Test set score: {:.2f}". format(knn.score(X_test, y_test)))

X_train, X_test, y_train, y_test = train_test_split(iris_dataset['data'], iris_dataset['target'], random_state=0)
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(X_train, y_train)
print("Test set score:{:.2f}".format(knn.score(X_test,y_test)))

#Supervised learning
X, y = mglearn.datasets.make_forge()
mglearn.discrete_scatter(X[:,0], X[:,1],y)
plt.legend(["Class 0", "Class 1"], loc=4)
plt.xlabel("First feature")
plt.ylabel("Second feature")
print("X.shape", X.shape)
X, y = mglearn.datasets.make_wave(n_samples=40)
plt.plot(X, y, 'o')
plt.ylim(-3, 3)
plt.xlabel("Feature")
plt.ylabel("Target")
from sklearn.datasets import load_breast_cancer
cancer = load_breast_cancer()
print("cancer.keys():\n", cancer.keys())
print("Shape of cancer data:", cancer.data.shape)
print("Sample counts per class:\n",{n: v for n, v in zip(cancer.target_names, np.bincount(cancer.target))})
print("Feature names:\n", cancer.feature_names)

